basePath: /api/v1
definitions:
  auth.RefreshAccessTokenHandlerRequest:
    properties:
      refresh_token:
        type: string
    type: object
  auth.RefreshAccessTokenHandlerResponse:
    properties:
      access_token:
        type: string
    type: object
  chat.ArchiveChatHandlerResponse:
    properties:
      finished:
        type: boolean
      success:
        type: boolean
    type: object
  chat.ChatWithSummaryAndHistoriesDTO:
    properties:
      chat_duration:
        type: string
      histories:
        items:
          $ref: '#/definitions/chat.HistoryDTO'
        type: array
      id:
        type: string
      is_archived:
        type: boolean
      is_finished:
        type: boolean
      session_id:
        type: string
      started_date:
        type: string
      summary:
        $ref: '#/definitions/chat.SummaryDTO'
      user_id:
        type: string
      user_timezone:
        type: string
    type: object
  chat.ChatWithSummaryDTO:
    properties:
      chat_duration:
        type: string
      id:
        type: string
      is_archived:
        type: boolean
      is_finished:
        type: boolean
      session_id:
        type: string
      started_date:
        type: string
      summary:
        $ref: '#/definitions/chat.SummaryDTO'
      user_id:
        type: string
      user_timezone:
        type: string
    type: object
  chat.HistoryDTO:
    properties:
      content:
        type: string
      id:
        type: string
      metadata:
        items:
          type: integer
        type: array
      role:
        type: string
      when:
        type: string
    type: object
  chat.ListChatResponse:
    properties:
      chats:
        items:
          $ref: '#/definitions/chat.ChatWithSummaryDTO'
        type: array
    type: object
  chat.MainTopic:
    properties:
      begin_message_id:
        type: string
      end_message_id:
        type: string
    type: object
  chat.SummaryDTO:
    properties:
      emotions:
        items:
          $ref: '#/definitions/common.EmotionRate'
        type: array
      keywords:
        items:
          type: string
        type: array
      main_topic:
        $ref: '#/definitions/chat.MainTopic'
      negative_score:
        type: number
      neutral_score:
        type: number
      positive_score:
        type: number
      recommendations:
        items:
          type: string
        type: array
      text:
        type: string
      title:
        type: string
    type: object
  chat.UpsertChatSummaryHandlerResponse:
    properties:
      created:
        type: boolean
      returning:
        $ref: '#/definitions/chat.SummaryDTO'
      success:
        type: boolean
    type: object
  common.Diagnosis:
    enum:
    - phq-9
    - gad-7
    - pss
    type: string
    x-enum-varnames:
    - DiagnosisPHQ9
    - DiagnosisGAD7
    - DiagnosisPSS
  common.DiagnosisAnswer:
    properties:
      score:
        type: integer
      text:
        type: string
    type: object
  common.DiagnosisPaper:
    properties:
      guides:
        type: string
      name:
        type: string
      questions:
        items:
          $ref: '#/definitions/common.DiagnosisQuestion'
        type: array
      results:
        items:
          $ref: '#/definitions/common.DiagnosisResult'
        type: array
      scoring:
        $ref: '#/definitions/common.DiagnosisScoring'
    type: object
  common.DiagnosisQuestion:
    properties:
      answers:
        items:
          $ref: '#/definitions/common.DiagnosisAnswer'
        type: array
      index:
        type: integer
      question:
        type: string
    type: object
  common.DiagnosisResult:
    properties:
      critical:
        type: boolean
      description:
        type: string
      max:
        type: integer
      min:
        type: integer
      name:
        type: string
    type: object
  common.DiagnosisScoring:
    properties:
      max:
        type: integer
      min:
        type: integer
    type: object
  common.Emotion:
    enum:
    - joy
    - sadness
    - anger
    - surprise
    - fear
    - disgust
    - neutral
    type: string
    x-enum-varnames:
    - EmotionJoy
    - EmotionSadness
    - EmotionAnger
    - EmotionSurprise
    - EmotionFear
    - EmotionDisgust
    - EmotionNeutral
  common.EmotionRate:
    properties:
      emotion:
        $ref: '#/definitions/common.Emotion'
      rate:
        type: number
    type: object
  common.Feature:
    enum:
    - escalate_crisis
    - suggest_test_phq9
    - suggest_test_gad7
    - suggest_test_pss
    - end_conversation
    type: string
    x-enum-varnames:
    - FeatureEscalateCrisis
    - FeatureSuggestTestPHQ9
    - FeatureSuggestTestGAD7
    - FeatureSuggestTestPSS
    - FeatureEndConversation
  diagnosis.DiagnosisDTO:
    properties:
      diagnosis:
        $ref: '#/definitions/common.Diagnosis'
      id:
        type: integer
      result_critical:
        type: boolean
      result_description:
        type: string
      result_name:
        type: string
      result_score:
        type: integer
      total_score:
        type: integer
    type: object
  diagnosis.ListDiagnosisPaperHandlerResponse:
    properties:
      description:
        type: string
      id:
        $ref: '#/definitions/common.Diagnosis'
    type: object
  diagnosis.ReportDiagnosisResultHandlerResponse:
    properties:
      id:
        type: integer
      success:
        type: boolean
    type: object
  http.Error:
    properties:
      message:
        type: string
    type: object
  oauth.AuthGoogleHandlerRequest:
    properties:
      code:
        type: string
    type: object
  oauth.AuthGoogleHandlerResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  oauth.StartGoogleHandlerResponse:
    properties:
      auth_url:
        type: string
    type: object
  user.SimplifiedAdditionDTO:
    properties:
      concerns:
        items:
          type: string
        type: array
      emotions:
        items:
          $ref: '#/definitions/common.Emotion'
        type: array
    type: object
  user.SimplifiedPrivacyDTO:
    properties:
      birthday:
        type: string
      gender:
        type: string
    type: object
  user.SimplifiedUserDTO:
    properties:
      addition:
        $ref: '#/definitions/user.SimplifiedAdditionDTO'
      email:
        type: string
      id:
        type: integer
      privacy:
        $ref: '#/definitions/user.SimplifiedPrivacyDTO'
      username:
        type: string
    type: object
  user.UpsertUserAdditionHandlerRequest:
    properties:
      concerns:
        items:
          type: string
        type: array
      emotions:
        items:
          $ref: '#/definitions/common.Emotion'
        type: array
    type: object
  user.UpsertUserAdditionHandlerResponse:
    properties:
      created:
        type: boolean
      success:
        type: boolean
    type: object
  user.UpsertUserPrivacyHandlerRequest:
    properties:
      birthday:
        type: string
      gender:
        type: string
    type: object
  user.UpsertUserPrivacyHandlerResponse:
    properties:
      created:
        type: boolean
      success:
        type: boolean
    type: object
  websocket.Action:
    enum:
    - noop
    - reject
    - data
    - notify
    type: string
    x-enum-varnames:
    - PredefinedActionNoop
    - PredefinedActionReject
    - PredefinedActionData
    - PredefinedActionNotify
  websocket.ResponseWrapper:
    properties:
      action:
        $ref: '#/definitions/websocket.Action'
      message_id:
        type: string
      payload: {}
      session_id:
        type: string
    type: object
host: ondaum.revimal.me
info:
  contact: {}
  description: This is a API server for Ondaum
  title: Ondaum API
  version: "1.0"
paths:
  /_schema/supported-diagnoses:
    get:
      consumes:
      - application/json
      description: List supported diagnoses
      operationId: ListSupportedDiagnosis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.Diagnosis'
            type: array
      summary: List supported diagnoses
      tags:
      - schema
  /_schema/supported-emotions:
    get:
      consumes:
      - application/json
      description: List supported emotions
      operationId: ListSupportedEmotion
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.Emotion'
            type: array
      summary: List supported emotions
      tags:
      - schema
  /_schema/supported-features:
    get:
      consumes:
      - application/json
      description: List supported features
      operationId: ListSupportedFeature
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.Feature'
            type: array
      summary: List supported features
      tags:
      - schema
  /_ws/chat:
    get:
      consumes:
      - application/json
      description: Connect Chat Websocket. Reference the notion page for more information.
      operationId: ConnectChatWebsocket
      parameters:
      - description: Websocket Session ID (optional; if not provided, the server will
          use the most recent non-archived conversation or create a new one if none
          exists)
        in: query
        name: session_id
        type: string
      - description: Access Token (optional; if not provided, the server will try
          to get the access token from the request header)
        in: query
        name: access_token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/websocket.ResponseWrapper'
        "426":
          description: Upgrade Required
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Connect Chat Websocket
      tags:
      - chat
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token
      operationId: RefreshAccessToken
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshAccessTokenHandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RefreshAccessTokenHandlerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Refresh access token
      tags:
      - auth
  /chats:
    get:
      consumes:
      - application/json
      description: List chats with optional filters for datetime range and emotion
      operationId: ListChat
      parameters:
      - description: Filter by chat started datetime in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ)
        in: query
        name: datetime_gte
        type: string
      - description: Filter by chat ended datetime in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ)
        in: query
        name: datetime_lte
        type: string
      - description: Filter by dominant emotions (comma separated, e.g. 'joy,sadness')
        in: query
        name: dominant_emotions
        type: string
      - description: Filter by sub-string matching keyword
        in: query
        name: matching_keyword
        type: string
      - description: Filter by sub-string matching content (search raw-text from histories,
          it could be slow for large data)
        in: query
        name: matching_content
        type: string
      - description: Filter by message ID
        in: query
        name: message_id
        type: string
      - description: Filter only archived chats
        in: query
        name: only_archived
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.ListChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: List chats
      tags:
      - chat
  /chats/{session_id}:
    get:
      consumes:
      - application/json
      description: Get chat with histories and summary
      operationId: GetChat
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.ChatWithSummaryAndHistoriesDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get chat
      tags:
      - chat
  /chats/{session_id}/archive:
    post:
      consumes:
      - application/json
      description: Archive a chat to prevent it from being accessed again and allow
        to summarize it.
      operationId: ArchiveChat
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.ArchiveChatHandlerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Archive a chat
      tags:
      - chat
  /chats/{session_id}/summary:
    get:
      consumes:
      - application/json
      description: Get summary of the chat
      operationId: GetSummary
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.SummaryDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get summary
      tags:
      - chat
    post:
      consumes:
      - application/json
      description: Create or update chat summary and return the created/updated chat
        summary
      operationId: UpsertChatSummary
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.UpsertChatSummaryHandlerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Create or update chat summary
      tags:
      - chat
  /diagnoses:
    get:
      consumes:
      - application/json
      description: List diagnosis result
      operationId: ListDiagnosisResult
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diagnosis.DiagnosisDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: List diagnosis result
      tags:
      - diagnosis
    post:
      consumes:
      - application/json
      description: Report diagnosis result
      operationId: ReportDiagnosisResult
      parameters:
      - description: Diagnosis result
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/diagnosis.DiagnosisDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diagnosis.ReportDiagnosisResultHandlerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Report diagnosis result
      tags:
      - diagnosis
  /diagnoses/papers:
    get:
      consumes:
      - application/json
      description: List diagnosis papers
      operationId: ListDiagnosisPaper
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/diagnosis.ListDiagnosisPaperHandlerResponse'
            type: array
      security:
      - BearerAuth: []
      summary: List diagnosis papers
      tags:
      - diagnosis
  /diagnosis-papers/{diagnosis_id}:
    get:
      consumes:
      - application/json
      description: Get diagnosis result
      operationId: GetDiagnosisResult
      parameters:
      - description: Diagnosis ID
        in: path
        name: diagnosis_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diagnosis.DiagnosisDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get diagnosis result
      tags:
      - diagnosis
  /diagnosis-papers/{paper_id}:
    get:
      consumes:
      - application/json
      description: Get diagnosis paper as JSON format
      operationId: GetDiagnosisPaper
      parameters:
      - description: Diagnosis Paper ID
        in: path
        name: paper_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.DiagnosisPaper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get diagnosis paper
      tags:
      - diagnosis
  /oauth/google/auth:
    post:
      consumes:
      - application/json
      description: Receives the authorization code (obtained from Google OAuth) and
        exchanges it for access and refresh tokens.
      operationId: ExchangeGoogleOAuthCode
      parameters:
      - description: Payload containing the authorization code received from Google
          OAuth
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/oauth.AuthGoogleHandlerRequest'
      - description: Redirect URI (optional; the client's callback URL where Google
          was redirect with the code)
        in: query
        name: redirect
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauth.AuthGoogleHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Exchange Google OAuth Code for Tokens
      tags:
      - oauth
  /oauth/google/start:
    get:
      consumes:
      - application/json
      description: Returns the Google OAuth authorization URL, which includes the
        specified redirect URI (the URL where Google will send the authorization code
        after login).
      operationId: StartGoogleOAuth
      parameters:
      - description: Redirect URI (the client's callback URL where Google will redirect
          with the code)
        in: query
        name: redirect
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauth.StartGoogleHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
      summary: Get Google OAuth Authorization URL
      tags:
      - oauth
  /user/addition:
    put:
      consumes:
      - application/json
      description: Updates or creates the user's additional information including
        concerns and emotions.
      operationId: UpsertUserAddition
      parameters:
      - description: User additional information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpsertUserAdditionHandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UpsertUserAdditionHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Update or Create User Additional Information
      tags:
      - user
  /user/privacy:
    put:
      consumes:
      - application/json
      description: Updates or creates the user's privacy information including gender
        and birthday.
      operationId: UpsertUserPrivacy
      parameters:
      - description: User privacy information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpsertUserPrivacyHandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UpsertUserPrivacyHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Update or Create User Privacy Information
      tags:
      - user
  /user/self:
    get:
      consumes:
      - application/json
      description: Returns the authenticated user's profile, including basic information
        and optional onboarding data.
      operationId: GetSelfUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.SimplifiedUserDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get Current Authenticated User Profile
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
