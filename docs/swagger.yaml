basePath: /api/v1
definitions:
  chat.ChatWithSimplifiedSummaryAndHistoriesDTO:
    properties:
      histories:
        items:
          $ref: '#/definitions/chat.HistoryDTO'
        type: array
      id:
        type: string
      is_archived:
        type: boolean
      is_finished:
        type: boolean
      session_id:
        type: string
      started_date:
        type: string
      summary:
        $ref: '#/definitions/chat.SimplifiedSummaryDTO'
      user_id:
        type: string
      user_timezone:
        type: string
    type: object
  chat.ChatWithSimplifiedSummaryDTO:
    properties:
      id:
        type: string
      is_archived:
        type: boolean
      is_finished:
        type: boolean
      session_id:
        type: string
      started_date:
        type: string
      summary:
        $ref: '#/definitions/chat.SimplifiedSummaryDTO'
      user_id:
        type: string
      user_timezone:
        type: string
    type: object
  chat.HistoryDTO:
    properties:
      content:
        type: string
      metadata:
        items:
          type: integer
        type: array
      role:
        type: string
      when:
        type: string
    type: object
  chat.SimplifiedSummaryDTO:
    properties:
      text:
        type: string
      title:
        type: string
    type: object
  common.Emotion:
    enum:
    - joy
    - sadness
    - anger
    - surprise
    - fear
    - disgust
    - neutral
    type: string
    x-enum-varnames:
    - EmotionJoy
    - EmotionSadness
    - EmotionAnger
    - EmotionSurprise
    - EmotionFear
    - EmotionDisgust
    - EmotionNeutral
  common.Feature:
    enum:
    - escalate_crisis
    - suggest_test_phq9
    - suggest_test_gad7
    - suggest_test_pss
    - end_conversation
    type: string
    x-enum-varnames:
    - FeatureEscalateCrisis
    - FeatureSuggestTestPHQ9
    - FeatureSuggestTestGAD7
    - FeatureSuggestTestPSS
    - FeatureEndConversation
  http.Error:
    properties:
      message:
        type: string
    type: object
  oauth.AuthGoogleHandlerRequest:
    properties:
      code:
        type: string
    type: object
  oauth.AuthGoogleHandlerResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  oauth.StartGoogleHandlerResponse:
    properties:
      auth_url:
        type: string
    type: object
  user.SimplifiedAdditionDTO:
    properties:
      concerns:
        items:
          type: string
        type: array
      emotions:
        items:
          $ref: '#/definitions/common.Emotion'
        type: array
    type: object
  user.SimplifiedPrivacyDTO:
    properties:
      birthday:
        type: string
      gender:
        type: string
    type: object
  user.SimplifiedUserDTO:
    properties:
      addition:
        $ref: '#/definitions/user.SimplifiedAdditionDTO'
      email:
        type: string
      id:
        type: integer
      privacy:
        $ref: '#/definitions/user.SimplifiedPrivacyDTO'
      username:
        type: string
    type: object
  user.UpsertAdditionHandlerRequest:
    properties:
      concerns:
        items:
          type: string
        type: array
      emotions:
        items:
          $ref: '#/definitions/common.Emotion'
        type: array
    type: object
  user.UpsertAdditionHandlerResponse:
    properties:
      created:
        type: boolean
      success:
        type: boolean
    type: object
  user.UpsertPrivacyHandlerRequest:
    properties:
      birthday:
        type: string
      gender:
        type: string
    type: object
  user.UpsertPrivacyHandlerResponse:
    properties:
      created:
        type: boolean
      success:
        type: boolean
    type: object
  websocket.Action:
    enum:
    - noop
    - reject
    - data
    - notify
    type: string
    x-enum-varnames:
    - PredefinedActionNoop
    - PredefinedActionReject
    - PredefinedActionData
    - PredefinedActionNotify
  websocket.ResponseWrapper:
    properties:
      action:
        $ref: '#/definitions/websocket.Action'
      message_id:
        type: string
      payload: {}
      session_id:
        type: string
    type: object
host: ondaum.revimal.me
info:
  contact: {}
  description: This is a API server for Ondaum
  title: Ondaum API
  version: "1.0"
paths:
  /_schema/supported-emotions:
    get:
      consumes:
      - application/json
      description: List supported emotions
      operationId: ListSupportedEmotion
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.Emotion'
            type: array
      summary: List supported emotions
      tags:
      - schema
  /_schema/supported-features:
    get:
      consumes:
      - application/json
      description: List supported features
      operationId: ListSupportedFeature
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.Feature'
            type: array
      summary: List supported features
      tags:
      - schema
  /chat/:session_id:
    get:
      consumes:
      - application/json
      description: Get chat with histories and summary
      operationId: GetChat
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.ChatWithSimplifiedSummaryAndHistoriesDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get chat
      tags:
      - chat
  /chat/:session_id/summary:
    get:
      consumes:
      - application/json
      description: Get summary of the chat
      operationId: GetSummary
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.SimplifiedSummaryDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get summary
      tags:
      - chat
  /chat/ws:
    get:
      consumes:
      - application/json
      description: Connect Chat Websocket. Reference the notion page for more information.
      operationId: ConnectChatWebsocket
      parameters:
      - description: Websocket Session ID (if not provided, the server will create
          a new session)
        in: query
        name: session_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/websocket.ResponseWrapper'
        "426":
          description: Upgrade Required
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Connect Chat Websocket
      tags:
      - chat
  /chats:
    get:
      consumes:
      - application/json
      description: List chats with summaries
      operationId: ListChat
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chat.ChatWithSimplifiedSummaryDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: List chats
      tags:
      - chat
  /oauth/google/auth:
    post:
      consumes:
      - application/json
      description: Receives the authorization code (obtained from Google OAuth) and
        exchanges it for access and refresh tokens.
      operationId: ExchangeGoogleOAuthCode
      parameters:
      - description: Payload containing the authorization code received from Google
          OAuth
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/oauth.AuthGoogleHandlerRequest'
      - description: Redirect URI (optional, the client's callback URL where Google
          was redirect with the code)
        in: query
        name: redirect
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauth.AuthGoogleHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Exchange Google OAuth Code for Tokens
      tags:
      - oauth
  /oauth/google/start:
    get:
      consumes:
      - application/json
      description: Returns the Google OAuth authorization URL, which includes the
        specified redirect URI (the URL where Google will send the authorization code
        after login).
      operationId: StartGoogleOAuth
      parameters:
      - description: Redirect URI (the client's callback URL where Google will redirect
          with the code)
        in: query
        name: redirect
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauth.StartGoogleHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
      summary: Get Google OAuth Authorization URL
      tags:
      - oauth
  /user/addition:
    put:
      consumes:
      - application/json
      description: Updates or creates the user's additional information including
        concerns and emotions.
      operationId: UpsertUserAddition
      parameters:
      - description: User additional information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpsertAdditionHandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UpsertAdditionHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Update or Create User Additional Information
      tags:
      - user
  /user/privacy:
    put:
      consumes:
      - application/json
      description: Updates or creates the user's privacy information including gender
        and birthday.
      operationId: UpsertUserPrivacy
      parameters:
      - description: User privacy information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpsertPrivacyHandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UpsertPrivacyHandlerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Update or Create User Privacy Information
      tags:
      - user
  /user/self:
    get:
      consumes:
      - application/json
      description: Returns the authenticated user's profile, including basic information
        and optional onboarding data.
      operationId: GetSelfUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.SimplifiedUserDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Error'
      security:
      - BearerAuth: []
      summary: Get Current Authenticated User Profile
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
