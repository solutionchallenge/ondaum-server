// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/jwt/generator.go
//
// Generated by this command:
//
//	mockgen -package=mock -destination=test/mock/jwt_generator_mock.go -source=pkg/jwt/generator.go -mock_names=Generator=MockJWTGenerator
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	jwt "github.com/solutionchallenge/ondaum-server/pkg/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTGenerator is a mock of Generator interface.
type MockJWTGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockJWTGeneratorMockRecorder
	isgomock struct{}
}

// MockJWTGeneratorMockRecorder is the mock recorder for MockJWTGenerator.
type MockJWTGeneratorMockRecorder struct {
	mock *MockJWTGenerator
}

// NewMockJWTGenerator creates a new mock instance.
func NewMockJWTGenerator(ctrl *gomock.Controller) *MockJWTGenerator {
	mock := &MockJWTGenerator{ctrl: ctrl}
	mock.recorder = &MockJWTGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTGenerator) EXPECT() *MockJWTGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJWTGenerator) GenerateToken(typ jwt.Type, value string, metadata map[string]any, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", typ, value, metadata, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTGeneratorMockRecorder) GenerateToken(typ, value, metadata, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWTGenerator)(nil).GenerateToken), typ, value, metadata, duration)
}

// GenerateTokenPair mocks base method.
func (m *MockJWTGenerator) GenerateTokenPair(value string, metadata ...map[string]any) (*jwt.TokenPair, error) {
	m.ctrl.T.Helper()
	varargs := []any{value}
	for _, a := range metadata {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateTokenPair", varargs...)
	ret0, _ := ret[0].(*jwt.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockJWTGeneratorMockRecorder) GenerateTokenPair(value any, metadata ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{value}, metadata...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockJWTGenerator)(nil).GenerateTokenPair), varargs...)
}

// GetTokenType mocks base method.
func (m *MockJWTGenerator) GetTokenType(tokenString string) (jwt.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenType", tokenString)
	ret0, _ := ret[0].(jwt.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenType indicates an expected call of GetTokenType.
func (mr *MockJWTGeneratorMockRecorder) GetTokenType(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenType", reflect.TypeOf((*MockJWTGenerator)(nil).GetTokenType), tokenString)
}

// RefreshTokenPair mocks base method.
func (m *MockJWTGenerator) RefreshTokenPair(refreshTokenString string) (*jwt.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenPair", refreshTokenString)
	ret0, _ := ret[0].(*jwt.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokenPair indicates an expected call of RefreshTokenPair.
func (mr *MockJWTGeneratorMockRecorder) RefreshTokenPair(refreshTokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenPair", reflect.TypeOf((*MockJWTGenerator)(nil).RefreshTokenPair), refreshTokenString)
}

// UnpackToken mocks base method.
func (m *MockJWTGenerator) UnpackToken(tokenString string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpackToken", tokenString)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpackToken indicates an expected call of UnpackToken.
func (mr *MockJWTGeneratorMockRecorder) UnpackToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpackToken", reflect.TypeOf((*MockJWTGenerator)(nil).UnpackToken), tokenString)
}
